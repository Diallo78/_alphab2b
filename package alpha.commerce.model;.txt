package alpha.commerce.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;

import java.math.BigDecimal;
@Entity
@Getter @Setter @EqualsAndHashCode(callSuper = true) @ToString
@AllArgsConstructor @NoArgsConstructor @Builder
@Table(name = "article")
public class Article extends AbstractEntity{
    private String code;

//    @NotNull(message = "Name product is mandatory")
      @Column(nullable = false, length = 100)
//    @Pattern(regexp = "^[a-zA-z]+$", message = "Le nom de la categorie ne doit contenir que des lettres.")
//    @Size(min = 3, message = "La categorie doit contenir au moins 3")
    private String nameProduct;
      
    @Column(nullable = false)
    private String description;

    private String detail;

    @Column(nullable = false)
//    @Digits(integer = 10, fraction = 2, message = "Le prix unitaire doit être au format ##,##.##.")
//    @DecimalMin(value = "0.00", message = "Le prix unitaire ne peut pas être inférieur à 0,00.")
//    @DecimalMax(value = "9999999.99", message = "Le prix unitaire ne peut pas dépasser 9 999 999,99.")
    private BigDecimal unitPriceHt;

    private BigDecimal vatRate; // taux de tva

    private BigDecimal unitPriceTtc;

    @ManyToOne
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

    @NotNull(message = "Stock is mandatory")
    @Digits(integer = 10, fraction = 0, message = "Le stock doit être un nombre entier.")
    private Integer stock;

    private String image;

    @ManyToOne
    @JoinColumn(name = "brand_id", nullable = false)
    private Brand brand; // marque

}

@NotNull(message = "Last Name is mandatory")
    @Column(nullable = false, length = 30)
    @Size(min = 2, max = 30, message = "Le nom doit contenir au moins 2 caractère alpha numerique (Ex: Ly).")
    @Pattern(regexp = "^[a-zA-z]+$", message = "Le nom ne doit contenir que des lettres.")
    private String lastName;

    @NotNull(message = "First Name is mandatory")
    @Column(nullable = false, length = 100)
    @Size(min = 3, message = "Le prénom doit contenir au moins 3 caractère alpha numerique (Ex: Aly)")
    @Pattern(regexp = "^[a-zA-z]+$", message = "Le prénom ne doit contenir que des lettres.")
    private String firstName;

    @NotNull(message = "E-mail is mandatory")
    @Column(nullable = false, unique = true)
    @Email(message = "Veuillez saisir une adresse email valide")
    private String email;

    @NotNull(message = "Adress is mandatory")
    @Column(nullable = false)
    private String adresse;

    @NotNull(message = "Number phone is mandatory")
    @Column(nullable = false)
    @Pattern(regexp = "[0-9\\-]", message = "Le numéro de téléphone doit être composé de chiffres et/ou de tirets (-).")
    private String tel;

    @NotNull(message = "Password is mandatory")
    @Column(nullable = false)
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&()-_+=]{8,}$",
            message = "Le mot de passe doit contenir au moins 8 caractères, une " +
                    "lettre majuscule, une lettre minuscule, un chiffre et un caractère spécial.")
    private String mdp;

    @ManyToMany
    @JoinTable(name = "customer_roles",
            joinColumns = @JoinColumn(name = "customer_id", nullable = false),
            inverseJoinColumns = @JoinColumn(name = "role_id", nullable = false))
    private List<Role> roles;
